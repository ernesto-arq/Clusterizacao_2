# -*- coding: utf-8 -*-
"""Clusterização-Exemplo (K-Means) com Clusters Fake.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R_LPxtdtkSyVHzMMJ9NnLchuqjEvxCQS
"""

import matplotlib.pyplot as plt
import numpy as np

"""import pandas as pd

## Criando alguns dados
"""

from sklearn.datasets import make_blobs

# Create Data
data = make_blobs(n_samples=200, n_features=2, 
                           centers=4, cluster_std=1.8,random_state=101)

"""## Visualizando o dado"""

#plt.scatter(data[0][:,0],data[0][:,1],c=data[1],cmap='rainbow')

"""## Criando os clusters"""

from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

kmeans = KMeans(n_clusters=4)

kmeans.fit(data[0])

for k in range(2, 15):
    kmeans_ = KMeans(n_clusters=k, random_state=10)
    kmeans_.fit(data[0])
    print(k, silhouette_score(data[0], kmeans_.predict(data[0])))

kmeans.cluster_centers_

data[1]

kmeans.labels_

'''
[-4.13591321,  7.95389851],
[-9.46941837, -6.56081545],
[-0.0123077 ,  2.13407664],
[ 3.71749226,  7.01388735]]
'''
kmeans.predict(np.array([-7.000, -6.56081545]).reshape(1, -1))

def plot_clusters(data, kmeans):
    f, (ax1, ax2) = plt.subplots(1, 2, sharey=True,figsize=(10,6))
    ax1.set_title('K Means')
    ax1.scatter(data[0][:,0],data[0][:,1],c=kmeans.labels_,cmap='rainbow')
    ax1.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], marker='X')
    ax2.set_title("Original")
    ax2.scatter(data[0][:,0],data[0][:,1],c=data[1],cmap='rainbow')

plot_clusters(data, kmeans)

"""##### Repare que, mesmo apresentando alguns erros, o K-means conseguiu excelentes resultados na separação dos agrupamentos!

### E se mudarmos o número de clusters? Experimente outros valores de K.
"""

kmeans = KMeans(n_clusters=2)

kmeans.fit(data[0])

plot_clusters(data, kmeans)

kmeans = KMeans(n_clusters=5)

kmeans.fit(data[0])

plot_clusters(data, kmeans)

